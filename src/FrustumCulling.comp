//
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct AABB {
  float pt[6];
};

struct DrawIndexedIndirectCommand {
  uint count;
  uint instanceCount;
  uint firstIndex;
  int  baseVertex;
  uint baseInstance;
};

struct DrawData {
  uint transformId;
  uint materialId;
};

layout(std430, buffer_reference) readonly buffer BoundingBoxes {
  AABB boxes[];
};

layout(std430, buffer_reference) readonly buffer DrawDataBuffer {
  DrawData dd[];
};

layout(std430, buffer_reference) buffer DrawCommands {
  uint dummy;
  DrawIndexedIndirectCommand dc[];
};

layout(std430, buffer_reference) buffer CullingData {
  vec4 planes[6];
  vec4 corners[8];
  uint numMeshesToCull;
  uint numVisibleMeshes;
};

layout(std430, push_constant) uniform PushConstants {
  DrawCommands commands;
  DrawDataBuffer drawData;
  BoundingBoxes AABBs;
  CullingData frustum;
};

#define Box_min_x box.pt[0]
#define Box_min_y box.pt[1]
#define Box_min_z box.pt[2]
#define Box_max_x box.pt[3]
#define Box_max_y box.pt[4]
#define Box_max_z box.pt[5]

// this is slow - use at your own risk (and just for educational purposes)!
bool isAABBinFrustum(AABB box)
{
  for (int i = 0; i < 6; i++) {
    int r = 0;
    r += ( dot( frustum.planes[i], vec4(Box_min_x, Box_min_y, Box_min_z, 1.0f) ) < 0 ) ? 1 : 0;
    r += ( dot( frustum.planes[i], vec4(Box_max_x, Box_min_y, Box_min_z, 1.0f) ) < 0 ) ? 1 : 0;
    r += ( dot( frustum.planes[i], vec4(Box_min_x, Box_max_y, Box_min_z, 1.0f) ) < 0 ) ? 1 : 0;
    r += ( dot( frustum.planes[i], vec4(Box_max_x, Box_max_y, Box_min_z, 1.0f) ) < 0 ) ? 1 : 0;
    r += ( dot( frustum.planes[i], vec4(Box_min_x, Box_min_y, Box_max_z, 1.0f) ) < 0 ) ? 1 : 0;
    r += ( dot( frustum.planes[i], vec4(Box_max_x, Box_min_y, Box_max_z, 1.0f) ) < 0 ) ? 1 : 0;
    r += ( dot( frustum.planes[i], vec4(Box_min_x, Box_max_y, Box_max_z, 1.0f) ) < 0 ) ? 1 : 0;
    r += ( dot( frustum.planes[i], vec4(Box_max_x, Box_max_y, Box_max_z, 1.0f) ) < 0 ) ? 1 : 0;
    if ( r == 8 ) return false;
  }

  int r = 0;
  r = 0; for ( int i = 0; i < 8; i++ ) r += ( (frustum.corners[i].x > Box_max_x) ? 1 : 0 ); if ( r == 8 ) return false;
  r = 0; for ( int i = 0; i < 8; i++ ) r += ( (frustum.corners[i].x < Box_min_x) ? 1 : 0 ); if ( r == 8 ) return false;
  r = 0; for ( int i = 0; i < 8; i++ ) r += ( (frustum.corners[i].y > Box_max_y) ? 1 : 0 ); if ( r == 8 ) return false;
  r = 0; for ( int i = 0; i < 8; i++ ) r += ( (frustum.corners[i].y < Box_min_y) ? 1 : 0 ); if ( r == 8 ) return false;
  r = 0; for ( int i = 0; i < 8; i++ ) r += ( (frustum.corners[i].z > Box_max_z) ? 1 : 0 ); if ( r == 8 ) return false;
  r = 0; for ( int i = 0; i < 8; i++ ) r += ( (frustum.corners[i].z < Box_min_z) ? 1 : 0 ); if ( r == 8 ) return false;

  return true;
}

void main()
{
  const uint idx = gl_GlobalInvocationID.x;

  // skip items beyond scene.meshForNode.size()
  if (idx < frustum.numMeshesToCull) {
    uint baseInstance = commands.dc[idx].baseInstance;
    AABB box = AABBs.boxes[drawData.dd[baseInstance].transformId];
    uint numInstances = isAABBinFrustum(box) ? 1 : 0;
    commands.dc[idx].instanceCount = numInstances;
    atomicAdd(frustum.numVisibleMeshes, numInstances);
  }
}
